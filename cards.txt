// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;
pragma experimental ABIEncoderV2;

import "../Strings.sol";
import "../Context.sol";
import "../IERC721Metadata.sol";
import "../IERC721Enumerable.sol";
import "../IERC721Receiver.sol";
import "../ERC165.sol";
import "../SafeMath.sol";
import "../Address.sol";
import "../EnumerableSet.sol";
import "../EnumerableMap.sol";


contract RPS is Context, ERC165, IERC721Metadata, IERC721Enumerable {
    
     struct card {
        uint256 cardtype; //1: Rock , 2: Paper, 3 : Scissors
        uint256 value;
        uint256 free; //0 for free 1 for purchased
    }
  using SafeMath for uint256;
    using Address for address;
    using EnumerableSet for EnumerableSet.UintSet;
    using EnumerableMap for EnumerableMap.UintToAddressMap;
    using Strings for uint256;
    
    uint256 _id = 1;

   
    // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`
    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`
    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    // Mapping from holder address to their (enumerable) set of owned tokens
    mapping (address => EnumerableSet.UintSet) private _holderTokens;
    
    mapping( uint256 => uint256) public total_supply;
    
    mapping(uint256 => uint256) public minted_tokens;

    // Enumerable mapping from token ids to their owners
    EnumerableMap.UintToAddressMap private _tokenOwners;
    
    mapping(uint256 => mapping(uint256 => address)) public tokenOwners;

    // Mapping from token ID to approved address
    mapping (uint256 => address) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping (address => mapping (address => bool)) private _operatorApprovals;
    
    
    mapping(address => mapping(uint256 => mapping(uint256 => card)))
    public player;

    mapping(address => mapping(uint256 => mapping(uint256 => uint256)))
    public playersTokenCount;
    
    
    mapping(address => mapping(uint256 => uint256[])) public ownToken;
    
    mapping(uint256 => mapping(uint256 => address)) public approval;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;
    
    uint256 public token_Id = 0;

    //uint256 public totalCount =0;
    address contractowner;
    address gameContractAddress;
    uint256 public currentSeason = 1;
    address marketAddress;
    

    // Optional mapping for token URIs
    mapping (uint256 => string) private _tokenURIs;
    
    mapping(address => mapping(uint256 => string)) allDetails;
    
    // Adding metaData to the property
    
    
    
    
    // Base URI
    string private _baseURI;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;

    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;

    constructor (uint256 supply) public {
        _name = "ROSHAMBO";
        _symbol = "ROSH";
        total_supply[currentSeason] = supply;
        contractowner = msg.sender;
        _registerInterface(_INTERFACE_ID_ERC721);
        _registerInterface(_INTERFACE_ID_ERC721_METADATA);
        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
    }
    
        modifier onlyOwner() {
        require(msg.sender == contractowner);
        _;
    }
    


     function setGameContractAddress(address contractAddress) public payable {
        require(msg.sender == contractowner);
        gameContractAddress = contractAddress;
    }

    function setMarketAddress(address _address) public payable {
        require(msg.sender == contractowner);
        marketAddress = _address;
    }

    function changeSeason(uint256 _supply) public payable onlyOwner {
        currentSeason += 1;
        total_supply[currentSeason] =_supply;
    }
    
    
    function createToken(
        address playeraddress,
        uint256 cardtype,
        uint256 _value
    ) public payable returns (uint256) {
        /* It will create the token at contractowner address */
        require(minted_tokens[currentSeason]<total_supply[currentSeason]);
        require(
            msg.sender == contractowner ||
                msg.sender == gameContractAddress ||
                msg.sender == marketAddress
        );
        
        player[playeraddress][currentSeason][++token_Id].cardtype = cardtype;
        player[playeraddress][currentSeason][token_Id].value = _value;
        ownToken[playeraddress][currentSeason].push(token_Id);
        playersTokenCount[playeraddress][currentSeason][cardtype] += 1;
        _tokenOwners.set(token_Id, playeraddress);
        _holderTokens[playeraddress].add(token_Id);
        string memory tempTok = "";
        string memory tempVal = "";
        string memory tempTyp = "";
        string memory fnl = "";
        tempTyp = cardtype.toString();
        tempVal = _value.toString();
        tempTok = token_Id.toString();
        fnl = string(abi.encodePacked(tempTok, "!", tempTyp, "!", tempVal));
        allDetails[playeraddress][currentSeason] = string(
            abi.encodePacked(allDetails[playeraddress][currentSeason], "@", fnl)
        );
        emit Transfer(address(0),playeraddress,token_Id);
        tokenOwners[currentSeason][token_Id] = playeraddress;
        minted_tokens[currentSeason]++;
        return token_Id;
    }
    
     function returnAllDetails(address _user) public view returns (string memory) {
        return allDetails[_user][currentSeason];
    }

    function tokenDetails(uint256 _tokenId)
        public
        view
        returns (uint256, uint256)
    {
        /* Function to return the type of the token and its value*/
        require(
            tokenOwners[currentSeason][_tokenId] != address(0),
            "Not a valid token"
        );
        address _address = tokenOwners[currentSeason][_tokenId];
        return (
            (player[_address][currentSeason][_tokenId].cardtype),
            player[_address][currentSeason][_tokenId].value
        );
    }

    function returnOwnedToken(address owner) public view returns (uint256[] memory) {
        return ownToken[owner][currentSeason];
    }

    function returnTokenCount(
        address _address,
        uint256 typ,
        bool _totalcount
    ) public view returns (uint256) {
        /* Function to return the total count of the token*/
        if (_totalcount == true) {
            uint256 count = playersTokenCount[_address][currentSeason][1] +
                playersTokenCount[_address][currentSeason][2] +
                playersTokenCount[_address][currentSeason][3];
            return count;
        } else {
            return playersTokenCount[_address][currentSeason][typ];
        }
    }



    function balanceOf(address owner) public view override returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");

        return _holderTokens[owner].length();
    }


    function ownerOf(uint256 tokenId) public view override returns (address) {
        return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
    }

    function name() public view override returns (string memory) {
        return _name;
    }

    function symbol() public view override returns (string memory) {
        return _symbol;
    }

    function tokenURI(uint256 tokenId) public view override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory _tokenURI = _tokenURIs[tokenId];

        // If there is no base URI, return the token URI.
        if (bytes(_baseURI).length == 0) {
            return _tokenURI;
        }
        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).
        if (bytes(_tokenURI).length > 0) {
            return string(abi.encodePacked(_baseURI, _tokenURI));
        }
        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.
        return string(abi.encodePacked(_baseURI, tokenId.toString()));
    }

    function baseURI() public view returns (string memory) {
        return _baseURI;
    }

    /**  
     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {
        return _holderTokens[owner].at(index);
    }

    /**
     * @dev See {IERC721Enumerable-totalSupply}.
     */
    function totalSupply() public view override returns (uint256) {
        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds
        return _tokenOwners.length();
    }

    /**
     * @dev See {IERC721Enumerable-tokenByIndex}.
     */
    function tokenByIndex(uint256 index) public view override returns (uint256) {
        (uint256 tokenId, ) = _tokenOwners.at(index);
        return tokenId;
    }
    

    /**
     * @dev See {IERC721-approve}.
     */
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    /**
     * @dev See {IERC721-getApproved}.
     */
    function getApproved(uint256 tokenId) public view override returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    /**
     * @dev See {IERC721-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override {
        require(operator != _msgSender(), "ERC721: approve to caller");

        _operatorApprovals[_msgSender()][operator] = approved;
        emit ApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator) public view override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev See {IERC721-transferFrom}.
     */
    function transferFrom(address from, address to, uint256 tokenId) public virtual override {
        //solhint-disable-next-line max-line-length
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

        _transfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        require(approval[currentSeason][tokenId] == msg.sender);
        _safeTransfer(from, to, tokenId, _data);
    }

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * `_data` is additional data, it has no specified format and it is sent in call to `to`.
     *
     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
     * implement alternative mechanisms to perform token transfer, such as signature-based.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     * and stop existing when they are burned (`_burn`).
     */
    function _exists(uint256 tokenId) internal view returns (bool) {
        return _tokenOwners.contains(tokenId);
    }

    /**
     * @dev Returns whether `spender` is allowed to manage `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner = ownerOf(tokenId);
        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }



    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId) internal virtual {
        address owner = ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId);

        // Clear approvals
        _approve(address(0), tokenId);

        // Clear metadata (if any)
        if (bytes(_tokenURIs[tokenId]).length != 0) {
            delete _tokenURIs[tokenId];
        }

        _holderTokens[owner].remove(tokenId);

        _tokenOwners.remove(tokenId);

        emit Transfer(owner, address(0), tokenId);
    }

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     *
     * Emits a {Transfer} event.
     */
    function _transfer(address from, address to, uint256 tokenId) internal virtual {
        require(ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
        require(to != address(0), "ERC721: transfer to the zero address");
         
         address token_address = ownerOf(tokenId);
        
         uint256 token_type = player[token_address][currentSeason][tokenId]
            .cardtype;

        tokenOwners[currentSeason][tokenId] = to;
        player[to][currentSeason][tokenId].cardtype = player[msg
            .sender][currentSeason][tokenId]
            .cardtype;
        player[to][currentSeason][tokenId].value = player[msg
            .sender][currentSeason][tokenId]
            .value;
        playersTokenCount[to][currentSeason][token_type] += 1;
        playersTokenCount[msg.sender][currentSeason][token_type] -= 1;
        for (
            uint256 i = 0;
            i < ownToken[msg.sender][currentSeason].length;
            i++
        ) {
            if (ownToken[msg.sender][currentSeason][i] == tokenId) {
                ownToken[msg.sender][currentSeason][i] = 0;
                break;
            }
        }
        ownToken[to][currentSeason].push(tokenId);
        delete (player[msg.sender][currentSeason][tokenId]);

        _beforeTokenTransfer(from, to, tokenId);

        // Clear approvals from the previous owner
        _approve(address(0), tokenId);

        _holderTokens[from].remove(tokenId);
        _holderTokens[to].add(tokenId);

        _tokenOwners.set(tokenId, to);

        emit Transfer(from, to, tokenId);
    }

    /**
     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
        require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
        _tokenURIs[tokenId] = _tokenURI;
    }

    /**
     * @dev Internal function to set the base URI for all token IDs. It is
     * automatically added as a prefix to the value returned in {tokenURI},
     * or to the token ID if {tokenURI} is empty.
     */
    function _setBaseURI(string memory baseURI_) internal virtual {
        _baseURI = baseURI_;
    }

    /**
     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
     * The call is not executed if the target address is not a contract.
     *
     * @param from address representing the previous owner of the given token ID
     * @param to target address that will receive the tokens
     * @param tokenId uint256 ID of the token to be transferred
     * @param _data bytes optional data to send along with the call
     * @return bool whether the call correctly returned the expected magic value
     */
    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)
        private returns (bool)
    {
        if (!to.isContract()) {
            return true;
        }
        bytes memory returndata = to.functionCall(abi.encodeWithSelector(
            IERC721Receiver(to).onERC721Received.selector,
            _msgSender(),
            from,
            tokenId,
            _data
        ), "ERC721: transfer to non ERC721Receiver implementer");
        bytes4 retval = abi.decode(returndata, (bytes4));
        return (retval == _ERC721_RECEIVED);
    }

    function _approve(address to, uint256 tokenId) private {
        _tokenApprovals[tokenId] = to;
        approval[currentSeason][tokenId] = to;
        emit Approval(ownerOf(tokenId), to, tokenId);
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }
    
    function returnSeason() public view returns (uint256) {
        return currentSeason;
    }
    
    function freeCardOrPurchased(address playerAddress, uint256 _tokenId , uint256 purchasedValue) public returns(uint256){ // function to change the value of card from free card to purchsed card
     // this will be called from marketplace only as then it would become purchased card
        uint256 value = player[playerAddress][currentSeason][_tokenId].free=purchasedValue;
        return value;
    }
    
    function unminted_tokens() public view returns(uint256){
        return total_supply[currentSeason] - minted_tokens[currentSeason];
    }
    
}
